Name:
UCLA ID:


-------------------------------------------------------------------------------

Response to Exercise 1:
	The sys_getpid() will return the correct value because
	interrupt function save the pid into current process(i)'s 
	register struct before calling schedule function. In the
	future, when the process i restart, it first load the pid
	from process i's register struct's eax, which is already
	saved and should not be modified when all other processes
	were running.

Response to Exercise 2:
	do_fork first find a state in array that have state of 
	P_EMPTY, then copy the register struct and stack to the 
	child's process. after that, the function changes state
	of child's process from P_EMPTY to P_RUNNABLE.
	when the process restart, it will first load pid from
	process's eax register. The return value of child process
	should be zero and parent's process should return child's
	pid; therefore, the child's eax should set to zero.
	do_fork(); copy_stack();

Response to Exercise 3:
	The process_t struct has a new element waitPID which holds
	the pid of the process it is waiting for. after the current
	process set to P_BLOCK, everytime schedule try to restart
	current process will first check the status of the process
	it is waiting. If that process is in P_ZOMBIE state, save
	the exist status of the process and restart current process.
	interrupt(); schedule();

Response to Exercise 4:
	Set the state of process to empty when process is exited.
	interrupt(); schedule();





Anything else you'd like us to know:



Extra credit exercises:

Response to Exercise 6:
	I add a sys_newthread()
		asm volatile("int %1\n"
				 : "=a" (result)   //thread pid
				 : "i" (INT_SYS_NEWTHREAD), 
				   "a" ((uint32_t)start_function) // start function
				 : "cc", "memory");
	and a do_newthread(). do_newthread() will find an empty 
	process first, and set its esp to its stack top(means it
	is empty). The function also set its state as RUNNABLE.
	Finally, set its eip to start function pointer.
	mpos-kern.c: interrupt()
	mpos-kern.c: do_newthread()
	mpos-app.h: sys_newthread()

Response to Exercise 7:
	add a sys_kill(pid_t pid) function with assembly code :
	asm volatile("int %1\n"
		     : "=a" (retval) 	   // save exit status
		     : "i" (INT_SYS_KILL), 
		       "a" (pid)		   // save pid try to kill
		     : "cc", "memory");

	I also add a case INT_SYS_KILL in interrupt function,
	similar as exit, it sets state of process with expect
	pid to P_ZOMBIE if it is P_RUNNABLE; However, it is
	possible to kill itself, so I use schedule() at the end.

	in mpos-app2 run_child function, it detect current process'
	pid, if pid is even, kill the process at front of it.
	the result shows that all even # of process lives.
	mpos-app.h:sys_kill() 
	mpos-kern.h:do_kill()
	mpos-kern.h:interrupt()

